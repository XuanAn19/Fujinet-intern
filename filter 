package fjs.cs;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class LoginFilter implements Filter {

    private List<String> allowedPages;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Định nghĩa các trang không cần kiểm tra đăng nhập (ví dụ: trang public)
        allowedPages = Arrays.asList("/home.jsp", "/productDetails.jsp", "/about.jsp");
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        // Lấy URI yêu cầu
        String requestURI = httpRequest.getRequestURI();

        // Nếu yêu cầu là trang công khai (không cần đăng nhập), bỏ qua kiểm tra
        if (isAllowedPage(requestURI)) {
            // Kiểm tra và lưu thông tin session nếu cần
            HttpSession session = httpRequest.getSession(false);
            if (session != null && session.getAttribute("user") != null) {
                // Đặt thông tin cần thiết vào session để có thể sử dụng trên các trang công khai
                // Ví dụ: Lấy userId từ session và lưu vào request để sử dụng trên JSP
                request.setAttribute("userId", session.getAttribute("userId"));
            }
            chain.doFilter(request, response); // Tiếp tục chuỗi filter
            return;
        }

        // Kiểm tra đăng nhập cho các trang yêu cầu quyền truy cập
        HttpSession session = httpRequest.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            // Nếu chưa đăng nhập, chuyển hướng tới trang login
            httpResponse.sendRedirect(httpRequest.getContextPath() + "/login.jsp");
            return;
        }

        // Tiếp tục chuỗi filter nếu đã đăng nhập
        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {
        // Làm sạch tài nguyên nếu cần
    }

    // Kiểm tra nếu là trang không yêu cầu đăng nhập
    private boolean isAllowedPage(String requestURI) {
        for (String page : allowedPages) {
            if (requestURI.endsWith(page)) {
                return true;
            }
        }
        return false;
    }
}



<filter>
    <filter-name>AuthFilter</filter-name>
    <filter-class>com.example.AuthFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>AuthFilter</filter-name>
    <url-pattern>*.do</url-pattern>
</filter-mapping>


import java.io.IOException;
import javax.servlet.*;
import javax.servlet.http.*;

public class AuthFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {}

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        
        System.out.println("AuthFilter is running...");

        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;
        HttpSession session = req.getSession(false);  // Không tạo session mới nếu chưa có

        String path = req.getServletPath();
        boolean isLoginPage = path.contains("login.do");  // Bỏ qua trang login

        if (!isLoginPage && (session == null || session.getAttribute("user") == null)) {
            System.out.println("User not logged in. Redirecting...");
            res.sendRedirect(req.getContextPath() + "/login.jsp");
            return; // Chặn request, không cho đi tiếp
        }

        // Nếu hợp lệ, tiếp tục request
        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {}
}

