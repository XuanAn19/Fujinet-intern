import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts.action.*;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.Session;
import org.hibernate.Transaction;
import java.io.*;
import java.util.*;

public class T002Action extends Action {
    private final String FILE_PATH = "D:/customers.xlsx"; // Đường dẫn file Excel

    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception {
        String action = request.getParameter("action");

        if ("export".equals(action)) {
            return exportCustomer(mapping, request, response);
        } else if ("import".equals(action)) {
            return importCustomer(mapping, request);
        }

        return mapping.findForward("success");
    }

    // Xuất danh sách khách hàng ra file Excel
    private ActionForward exportCustomer(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response) {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Customers");

            // Tiêu đề cột
            Row headerRow = sheet.createRow(0);
            String[] columns = {"Customer ID", "Name", "Sex", "Birthday", "Email", "Address"};
            for (int i = 0; i < columns.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(columns[i]);
            }

            // Lấy dữ liệu từ database
            Session session = HibernateUtil.getSessionFactory().openSession();
            List<T002> customers = session.createCriteria(T002.class).list();
            session.close();

            int rowNum = 1;
            for (T002 customer : customers) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(customer.getCustomerID());
                row.createCell(1).setCellValue(customer.getName());
                row.createCell(2).setCellValue(customer.getSex());
                row.createCell(3).setCellValue(customer.getBirthday());
                row.createCell(4).setCellValue(customer.getEmail());
                row.createCell(5).setCellValue(customer.getAddress());
            }

            // Ghi file
            response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setHeader("Content-Disposition", "attachment; filename=customers.xlsx");
            OutputStream out = response.getOutputStream();
            workbook.write(out);
            out.close();
            workbook.close();
        } catch (IOException e) {
            request.setAttribute("error", "Xuất danh sách thất bại: " + e.getMessage());
        }
        return null; // Không chuyển trang, trả về file
    }

    // Import danh sách khách hàng từ file Excel vào database
    private ActionForward importCustomer(ActionMapping mapping, HttpServletRequest request) {
        if (!ServletFileUpload.isMultipartContent(request)) {
            request.setAttribute("error", "Vui lòng chọn file Excel!");
            return mapping.findForward("success");
        }

        try {
            List<FileItem> formItems = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);
            for (FileItem item : formItems) {
                if (!item.isFormField()) {
                    try (InputStream inputStream = item.getInputStream();
                         Workbook workbook = new XSSFWorkbook(inputStream)) {

                        Sheet sheet = workbook.getSheetAt(0);
                        Session session = HibernateUtil.getSessionFactory().openSession();
                        Transaction transaction = session.beginTransaction();

                        for (int i = 1; i <= sheet.getLastRowNum(); i++) { // Bỏ qua dòng tiêu đề
                            Row row = sheet.getRow(i);
                            if (row == null) continue;

                            T002 customer = new T002();
                            customer.setCustomerID((int) row.getCell(0).getNumericCellValue());
                            customer.setName(row.getCell(1).getStringCellValue());
                            customer.setSex(row.getCell(2).getStringCellValue());
                            customer.setBirthday(row.getCell(3).getStringCellValue());
                            customer.setEmail(row.getCell(4).getStringCellValue());
                            customer.setAddress(row.getCell(5).getStringCellValue());

                            session.save(customer);
                        }

                        transaction.commit();
                        session.close();
                        request.setAttribute("message", "Import danh sách khách hàng thành công!");
                    }
                }
            }
        } catch (Exception e) {
            request.setAttribute("error", "Import thất bại: " + e.getMessage());
        }
        return mapping.findForward("success");
    }
}

<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>
<h2>Quản lý khách hàng</h2>

<!-- Export danh sách khách hàng -->
<form action="customerAction.do" method="post">
    <input type="hidden" name="action" value="export"/>
    <input type="submit" value="Export Customer"/>
</form>

<!-- Import danh sách khách hàng -->
<form action="customerAction.do" method="post" enctype="multipart/form-data">
    <input type="hidden" name="action" value="import"/>
    <input type="file" name="file" accept=".xlsx"/>
    <input type="submit" value="Import Customer"/>
</form>

<!-- Hiển thị thông báo -->
<c:if test="${not empty message}">
    <p style="color: green;">${message}</p>
</c:if>
<c:if test="${not empty error}">
    <p style="color: red;">${error}</p>
</c:if>
<action path="/customerAction"
        type="fjs.cs.action.T002Action"
        scope="request"
        validate="false"
        input="/T002.jsp">
    <forward name="success" path="/T002.jsp"/>
</action>
