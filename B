// Lấy danh sách các đối tượng từ Hibernate, không xác định kiểu (danh sách có kiểu List<?>)
List<?> rawList = criteria.list();  

// Khởi tạo một danh sách mới để chứa các đối tượng Customer sau khi lọc
List<Customer> result = new ArrayList<>();

// Duyệt qua từng đối tượng trong danh sách rawList (có kiểu List<?>)
for (Object obj : rawList) {
    
    // Kiểm tra xem đối tượng obj có phải là một instance của lớp Customer không
    if (obj instanceof Customer) {
        
        // Nếu obj là một Customer, thực hiện ép kiểu và thêm vào danh sách result
        result.add((Customer) obj);
    }
}




public boolean updateCustomer(CustomerDto customerDto, int userUpdate) {
    Transaction transaction = null;
    Session session = null;
    boolean isUpdated = false;

    try {
        session = sessionFactory.openSession();
        transaction = session.beginTransaction();

        // Sử dụng HQL để update trực tiếp, không cần load đối tượng
        Query query = session.createQuery(
            "UPDATE T002 SET name = :name, sex = :sex, birthday = :birthday, " +
            "email = :email, address = :address, lastUpdatedBy = :lastUpdatedBy, " +
            "lastUpdatedDate = :lastUpdatedDate WHERE customerID = :customerID"
        );

        query.setParameter("name", customerDto.getName());
        query.setParameter("sex", customerDto.getSex());
        query.setParameter("birthday", customerDto.getBirthday());
        query.setParameter("email", customerDto.getEmail());
        query.setParameter("address", customerDto.getAddress());
        query.setParameter("lastUpdatedBy", userUpdate);
        query.setParameter("lastUpdatedDate", new Date());
        query.setParameter("customerID", customerDto.getCustomerID());

        int rowCount = query.executeUpdate();

        // Kiểm tra số dòng bị ảnh hưởng
        isUpdated = rowCount > 0;

        transaction.commit();
    } catch (Exception e) {
        if (transaction != null) {
            transaction.rollback();
        }
        e.printStackTrace();
    } finally {
        if (session != null) {
            session.close();
        }
    }

    return isUpdated;
}



public boolean updateCustomer(CustomerDto customerDto, int userUpdate) {
    Transaction transaction = null;
    Session session = null;
    boolean isUpdated = false;

    try {
        session = sessionFactory.openSession();
        transaction = session.beginTransaction();

        // Tạo DetachedCriteria để lấy khách hàng cần cập nhật
        DetachedCriteria criteria = DetachedCriteria.forClass(T002.class);
        criteria.add(Restrictions.eq("customerID", customerDto.getCustomerID()));

        // Thực thi truy vấn để lấy đối tượng cần cập nhật
        List<T002> customers = criteria.getExecutableCriteria(session).list();

        if (!customers.isEmpty()) {
            T002 customer = customers.get(0);

            // Cập nhật thông tin khách hàng
            customer.setName(customerDto.getName());
            customer.setSex(customerDto.getSex());
            customer.setBirthday(customerDto.getBirthday());
            customer.setEmail(customerDto.getEmail());
            customer.setAddress(customerDto.getAddress());
            customer.setLastUpdatedBy(userUpdate);
            customer.setLastUpdatedDate(new Date());

            // Lưu cập nhật vào database
            session.update(customer);
            isUpdated = true;
        }

        // Commit transaction
        transaction.commit();
    } catch (Exception e) {
        if (transaction != null) {
            transaction.rollback();
        }
        e.printStackTrace();
    } finally {
        if (session != null) {
            session.close();
        }
    }

    return isUpdated;
}




public void softDeleteCustomers(List<Integer> ids) {
    if (ids == null || ids.isEmpty()) {
        return;
    }

    Transaction transaction = null;
    Session session = null;
    try {
        session = sessionFactory.openSession();
        transaction = session.beginTransaction();

        // Tạo tiêu chí truy vấn khách hàng có ID trong danh sách ids
        DetachedCriteria criteria = DetachedCriteria.forClass(T002.class);
        criteria.add(Restrictions.in("customerID", ids));

        // Lấy danh sách khách hàng cần cập nhật
        List<T002> customers = criteria.getExecutableCriteria(session).list();

        // Duyệt danh sách và cập nhật deleteYmd
        Date currentDate = new Date();
        for (T002 customer : customers) {
            customer.setDeleteYmd(currentDate);
            session.update(customer);
        }

        // Commit transaction
        transaction.commit();
    } catch (Exception e) {
        if (transaction != null) {
            transaction.rollback();
        }
        e.printStackTrace();
    } finally {
        if (session != null) {
            session.close();
        }
    }
}





/**
 * Xóa mềm danh sách khách hàng bằng cách cập nhật trường `deleteYmd`
 * @param ids - Danh sách ID của khách hàng cần xóa
 */
public void softDeleteCustomers(List<Integer> ids) {
    if (ids == null || ids.isEmpty()) {
        return; // Không làm gì nếu danh sách ID rỗng
    }

    Transaction transaction = null;
    try {
        // Mở phiên làm việc với SessionFactory
        Session session = sessionFactory.openSession();

        // Bắt đầu giao dịch
        transaction = session.beginTransaction();

        // Tạo truy vấn cập nhật trường `deleteYmd`
        Query query = session.createQuery("UPDATE T002 SET deleteYmd = :deleteYmd WHERE customerID IN (:ids)");

        // Thiết lập tham số
        query.setParameter("deleteYmd", new Date()); // Gán ngày xóa là ngày hiện tại
        query.setParameterList("ids", ids); // Gán danh sách ID cần xóa

        // Thực thi truy vấn
        query.executeUpdate();

        // Xác nhận giao dịch
        transaction.commit();
    } catch (Exception e) {
        if (transaction != null)
            transaction.rollback(); // Hoàn tác nếu có lỗi
        e.printStackTrace(); // In lỗi ra console
    }
}

/**
 * Kiểm tra thông tin đăng nhập của người dùng
 * @param dto - Đối tượng `T001Dto` chứa thông tin đăng nhập
 * @return `true` nếu tài khoản tồn tại, `false` nếu tài khoản không tồn tại
 */
public boolean checkUser(T001Dto dto) {
    int CNT = t001Dao.checkLogin(dto);

    if (CNT == 1) {
        return true; // Đăng nhập thành công
    }
    return false; // Đăng nhập thất bại
}



/**
 * Lấy danh sách khách hàng theo tiêu chí tìm kiếm
 * @param customerName - Tên khách hàng cần tìm
 * @param sex - Giới tính của khách hàng
 * @param birthDayFrom - Ngày sinh bắt đầu
 * @param birthDayTo - Ngày sinh kết thúc
 * @param offset - Vị trí bắt đầu trong danh sách kết quả
 * @param limit - Số lượng khách hàng cần lấy
 * @return Danh sách khách hàng phù hợp với điều kiện tìm kiếm
 */
public List<CustomerDto> getCustomer(String customerName, String sex, String birthDayFrom, String birthDayTo,
                                     int offset, int limit) {
    T002Dto dto = new T002Dto(customerName, sex, birthDayFrom, birthDayTo);
    List<CustomerDto> customer = t002Dao.getCustomers(dto, offset, limit);

    return customer;
}

/**
 * Lấy tổng số bản ghi khách hàng theo tiêu chí tìm kiếm
 * @param customerName - Tên khách hàng cần tìm
 * @param sex - Giới tính của khách hàng
 * @param birthDayFrom - Ngày sinh bắt đầu
 * @param birthDayTo - Ngày sinh kết thúc
 * @return Tổng số bản ghi khách hàng phù hợp với điều kiện tìm kiếm
 */
public int getTotalRecords(String customerName, String sex, String birthDayFrom, String birthDayTo) {
    T002Dto dto = new T002Dto(customerName, sex, birthDayFrom, birthDayTo);
    int totalRecord = t002Dao.getTotalCustomer(dto);

    return totalRecord;
}

/**
 * Xóa mềm danh sách khách hàng (chỉ cập nhật trường `deleteYmd`)
 * @param ids - Danh sách ID của khách hàng cần xóa
 */
public void deleteCustomers(List<Integer> ids) {
    t002Dao.softDeleteCustomers(ids);
}


/**
 * Lấy danh sách khách hàng theo tiêu chí tìm kiếm
 * @param customerName - Tên khách hàng cần tìm
 * @param sex - Giới tính của khách hàng
 * @param birthDayFrom - Ngày sinh bắt đầu
 * @param birthDayTo - Ngày sinh kết thúc
 * @param offset - Vị trí bắt đầu trong danh sách kết quả
 * @param limit - Số lượng khách hàng cần lấy
 * @return Danh sách khách hàng phù hợp với điều kiện tìm kiếm
 */
public List<CustomerDto> getCustomer(String customerName, String sex, String birthDayFrom, String birthDayTo,
                                     int offset, int limit) {
    T002Dto dto = new T002Dto(customerName, sex, birthDayFrom, birthDayTo);
    List<CustomerDto> customer = t002Dao.getCustomers(dto, offset, limit);

    return customer;
}

/**
 * Lấy tổng số bản ghi khách hàng theo tiêu chí tìm kiếm
 * @param customerName - Tên khách hàng cần tìm
 * @param sex - Giới tính của khách hàng
 * @param birthDayFrom - Ngày sinh bắt đầu
 * @param birthDayTo - Ngày sinh kết thúc
 * @return Tổng số bản ghi khách hàng phù hợp với điều kiện tìm kiếm
 */
public int getTotalRecords(String customerName, String sex, String birthDayFrom, String birthDayTo) {
    T002Dto dto = new T002Dto(customerName, sex, birthDayFrom, birthDayTo);
    int totalRecord = t002Dao.getTotalCustomer(dto);

    return totalRecord;
}

/**
 * Xóa mềm danh sách khách hàng (chỉ cập nhật trường `deleteYmd`)
 * @param ids - Danh sách ID của khách hàng cần xóa
 */
public void deleteCustomers(List<Integer> ids) {
    t002Dao.softDeleteCustomers(ids);
}



/**
 * Lấy thông tin người dùng dựa trên DTO truyền vào
 * @param dto - Đối tượng `T001Dto` chứa thông tin tìm kiếm
 * @return Đối tượng `UserDto` nếu tìm thấy, `null` nếu không tìm thấy hoặc có lỗi
 */
public UserDto getUserByDto(T001Dto dto) {
    try {
        UserDto user = t001Dao.getUserByDto(dto);
        return user;
    } catch (Exception e) {
        e.printStackTrace(); // In lỗi nếu xảy ra ngoại lệ
    }
    return null;
}



private T003Dao t003Dao;

/**
 * Thiết lập đối tượng DAO để thao tác với cơ sở dữ liệu
 * @param t003Dao - Đối tượng DAO cho khách hàng
 */
public void setT003Dao(T003Dao t003Dao) {
    this.t003Dao = t003Dao;
}

/**
 * Lấy thông tin khách hàng theo ID
 * @param customerId - ID của khách hàng cần lấy thông tin
 * @return Đối tượng `CustomerDto` chứa thông tin khách hàng
 * @throws SQLException Nếu có lỗi khi truy vấn cơ sở dữ liệu
 */
public CustomerDto getCustomerById(int customerId) throws SQLException {
    return t003Dao.getCustomerById(customerId);
}

/**
 * Cập nhật thông tin khách hàng
 * @param customer - Đối tượng `CustomerDto` chứa thông tin cần cập nhật
 * @param userUpdate - ID của người thực hiện cập nhật
 * @return `true` nếu cập nhật thành công, `false` nếu thất bại
 * @throws SQLException Nếu có lỗi khi cập nhật dữ liệu
 */
public boolean updateCustomer(CustomerDto customer, int userUpdate) throws SQLException {
    boolean isTrue = t003Dao.updateCustomer(customer, userUpdate);
    return isTrue;
}

/**
 * Thêm mới khách hàng vào hệ thống
 * @param customer - Đối tượng `CustomerDto` chứa thông tin khách hàng cần thêm
 * @param userAdd - ID của người thực hiện thêm
 * @return `true` nếu thêm thành công, `false` nếu thất bại
 */
public boolean addCustomer(CustomerDto customer, int userAdd) {
    boolean isTrue = t003Dao.addCustomer(customer, userAdd);
    return isTrue;
}
