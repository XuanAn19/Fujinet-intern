// T002Action.java
package fa.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import fa.form.T002Form;
import fa.service.T002Service;

public class T002Action extends Action {
    private T002Service service = new T002Service();

    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response) {
        T002Form t002Form = (T002Form) form;
        String action = request.getParameter("action");
        
        if ("search".equals(action)) {
            t002Form.setCustomers(service.searchCustomers(t002Form));
        } else if ("delete".equals(action)) {
            service.deleteCustomers(request.getParameterValues("customerIds"));
        }
        
        return mapping.findForward("success");
    }
}
----------
T002Form.java
package fa.form;

import org.apache.struts.action.ActionForm;
import java.util.List;
import fuji.T002;

public class T002Form extends ActionForm {
    private String customerName;
    private String sex;
    private String birthdayStart;
    private String birthdayEnd;
    private int currentPage = 1;
    private int totalPages;
    private List<T002> customers;
    private String[] selectedCustomerIds; // Mảng chứa ID của khách hàng cần xóa

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getBirthdayStart() {
        return birthdayStart;
    }

    public void setBirthdayStart(String birthdayStart) {
        this.birthdayStart = birthdayStart;
    }

    public String getBirthdayEnd() {
        return birthdayEnd;
    }

    public void setBirthdayEnd(String birthdayEnd) {
        this.birthdayEnd = birthdayEnd;
    }

    public int getCurrentPage() {
        return currentPage;
    }

    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }

    public int getTotalPages() {
        return totalPages;
    }

    public void setTotalPages(int totalPages) {
        this.totalPages = totalPages;
    }

    public List<T002> getCustomers() {
        return customers;
    }

    public void setCustomers(List<T002> customers) {
        this.customers = customers;
    }

    public String[] getSelectedCustomerIds() {
        return selectedCustomerIds;
    }

    public void setSelectedCustomerIds(String[] selectedCustomerIds) {
        this.selectedCustomerIds = selectedCustomerIds;
    }
}

--------
T002Service.java
package fa.service;

import fa.dao.T002Dao;
import fuji.T002;
import java.util.List;

public class T002Service {
    private T002Dao t002Dao = new T002Dao();
    private static final int PAGE_SIZE = 5; // Số lượng khách hàng trên mỗi trang

    /**
     * Tìm kiếm khách hàng dựa trên điều kiện và hỗ trợ phân trang.
     */
    public List<T002> searchCustomers(String customerName, String sex, String birthdayStart, String birthdayEnd, int page) {
        int offset = (page - 1) * PAGE_SIZE;
        return t002Dao.searchCustomers(customerName, sex, birthdayStart, birthdayEnd, offset, PAGE_SIZE);
    }

    /**
     * Tính tổng số trang dựa trên số lượng khách hàng tìm được.
     */
    public int getTotalPages(String customerName, String sex, String birthdayStart, String birthdayEnd) {
        int totalRecords = t002Dao.countCustomers(customerName, sex, birthdayStart, birthdayEnd);
        return (int) Math.ceil((double) totalRecords / PAGE_SIZE);
    }

    /**
     * Xóa mềm khách hàng bằng cách cập nhật delete_YMD.
     */
    public void deleteCustomers(String[] customerIds) {
        if (customerIds != null) {
            for (String id : customerIds) {
                t002Dao.softDeleteCustomer(Integer.parseInt(id));
            }
        }
    }
}

-----------
T002Dao.java
package fa.dao;

import fa.utils.DBConnection;
import fuji.T002;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class T002Dao {

    /**
     * Tìm kiếm khách hàng với điều kiện lọc và hỗ trợ phân trang.
     */
    public List<T002> searchCustomers(String customerName, String sex, String birthdayStart, String birthdayEnd, int offset, int limit) {
        List<T002> customers = new ArrayList<>();
        String sql = "SELECT id, name, sex, birthday, email, address FROM customers WHERE delete_YMD IS NULL";

        if (customerName != null && !customerName.isEmpty()) {
            sql += " AND name LIKE ?";
        }
        if (sex != null && !sex.isEmpty()) {
            sql += " AND sex = ?";
        }
        if (birthdayStart != null && !birthdayStart.isEmpty()) {
            sql += " AND birthday >= ?";
        }
        if (birthdayEnd != null && !birthdayEnd.isEmpty()) {
            sql += " AND birthday <= ?";
        }
        sql += " ORDER BY id ASC LIMIT ? OFFSET ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            int index = 1;
            if (customerName != null && !customerName.isEmpty()) {
                ps.setString(index++, "%" + customerName + "%");
            }
            if (sex != null && !sex.isEmpty()) {
                ps.setString(index++, sex);
            }
            if (birthdayStart != null && !birthdayStart.isEmpty()) {
                ps.setString(index++, birthdayStart);
            }
            if (birthdayEnd != null && !birthdayEnd.isEmpty()) {
                ps.setString(index++, birthdayEnd);
            }
            ps.setInt(index++, limit);
            ps.setInt(index, offset);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                customers.add(new T002(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("sex"),
                    rs.getDate("birthday"),
                    rs.getString("email"),
                    rs.getString("address")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customers;
    }

    /**
     * Đếm tổng số khách hàng phù hợp với điều kiện tìm kiếm.
     */
    public int countCustomers(String customerName, String sex, String birthdayStart, String birthdayEnd) {
        int count = 0;
        String sql = "SELECT COUNT(*) FROM customers WHERE delete_YMD IS NULL";

        if (customerName != null && !customerName.isEmpty()) {
            sql += " AND name LIKE ?";
        }
        if (sex != null && !sex.isEmpty()) {
            sql += " AND sex = ?";
        }
        if (birthdayStart != null && !birthdayStart.isEmpty()) {
            sql += " AND birthday >= ?";
        }
        if (birthdayEnd != null && !birthdayEnd.isEmpty()) {
            sql += " AND birthday <= ?";
        }

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            int index = 1;
            if (customerName != null && !customerName.isEmpty()) {
                ps.setString(index++, "%" + customerName + "%");
            }
            if (sex != null && !sex.isEmpty()) {
                ps.setString(index++, sex);
            }
            if (birthdayStart != null && !birthdayStart.isEmpty()) {
                ps.setString(index++, birthdayStart);
            }
            if (birthdayEnd != null && !birthdayEnd.isEmpty()) {
                ps.setString(index++, birthdayEnd);
            }

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                count = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    /**
     * Xóa mềm khách hàng bằng cách cập nhật delete_YMD.
     */
    public void softDeleteCustomer(int customerId) {
        String sql = "UPDATE customers SET delete_YMD = CURRENT_DATE WHERE id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setInt(1, customerId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

----------------
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib uri="http://struts.apache.org/tags-html" prefix="html" %>
<%@ taglib uri="http://struts.apache.org/tags-bean" prefix="bean" %>
<%@ taglib uri="http://struts.apache.org/tags-logic" prefix="logic" %>

<html>
<head>
    <title>Danh sách khách hàng</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="script.js"></script>
</head>
<body>

    <h2>Danh sách khách hàng</h2>

    <!-- Form tìm kiếm -->
    <html:form action="/searchCustomers" method="post">
        <table>
            <tr>
                <td>Tên khách hàng:</td>
                <td><html:text property="customerName" /></td>
                <td>Giới tính:</td>
                <td>
                    <html:select property="sex">
                        <html:option value="">-- Chọn --</html:option>
                        <html:option value="M">Nam</html:option>
                        <html:option value="F">Nữ</html:option>
                    </html:select>
                </td>
            </tr>
            <tr>
                <td>Ngày sinh từ:</td>
                <td><html:text property="birthDayFrom" /></td>
                <td>đến:</td>
                <td><html:text property="birthDayTo" /></td>
            </tr>
            <tr>
                <td colspan="4">
                    <html:submit value="Tìm kiếm" />
                </td>
            </tr>
        </table>
    </html:form>

    <!-- Danh sách khách hàng -->
    <table border="1">
        <tr>
            <th>ID</th>
            <th>Tên</th>
            <th>Giới tính</th>
            <th>Ngày sinh</th>
            <th>Email</th>
            <th>Địa chỉ</th>
            <th>Hành động</th>
        </tr>

        <logic:iterate id="customer" name="customerList">
            <tr>
                <td><bean:write name="customer" property="id" /></td>
                <td><bean:write name="customer" property="name" /></td>
                <td><bean:write name="customer" property="sex" /></td>
                <td><bean:write name="customer" property="birthday" /></td>
                <td><bean:write name="customer" property="email" /></td>
                <td><bean:write name="customer" property="address" /></td>
                <td>
                    <button onclick="deleteCustomer('<bean:write name="customer" property="id" />')">Xóa</button>
                </td>
            </tr>
        </logic:iterate>
    </table>

    <!-- Phân trang -->
    <div class="pagination">
        <logic:greaterThan name="currentPage" value="1">
            <a href="T002.do?page=<bean:write name="previousPage" />">Trước</a>
        </logic:greaterThan>

        <logic:iterate id="i" begin="1" end="<bean:write name='totalPages' />">
            <a href="T002.do?page=<bean:write name="i" />"><bean:write name="i" /></a>
        </logic:iterate>

        <logic:lessThan name="currentPage" value="<bean:write name='totalPages' />">
            <a href="T002.do?page=<bean:write name="nextPage" />">Sau</a>
        </logic:lessThan>
    </div>

</body>
</html>

-----------
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: #f4f4f4;
}

h2 {
    text-align: center;
    color: #333;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background: #fff;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

th, td {
    border: 1px solid #ddd;
    padding: 10px;
    text-align: center;
}

th {
    background-color: #007bff;
    color: white;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

button {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 4px;
}

button:hover {
    background-color: #c82333;
}

.pagination {
    text-align: center;
    margin-top: 20px;
}

.pagination a {
    text-decoration: none;
    background: #007bff;
    color: white;
    padding: 8px 12px;
    margin: 0 5px;
    border-radius: 4px;
}

.pagination a:hover {
    background: #0056b3;
}

form table {
    margin: auto;
}

form td {
    padding: 5px;
}

-----------
document.addEventListener("DOMContentLoaded", function () {
    // Xử lý tìm kiếm
    document.getElementById("searchForm").addEventListener("submit", function (event) {
        event.preventDefault(); // Ngăn chặn tải lại trang
        searchCustomers();
    });

    // Xử lý xóa khách hàng
    document.querySelectorAll(".delete-btn").forEach(button => {
        button.addEventListener("click", function () {
            let customerId = this.getAttribute("data-id");
            if (confirm("Bạn có chắc chắn muốn xóa khách hàng này?")) {
                deleteCustomer(customerId);
            }
        });
    });

    // Xử lý phân trang
    document.querySelectorAll(".pagination a").forEach(link => {
        link.addEventListener("click", function (event) {
            event.preventDefault();
            let page = this.getAttribute("data-page");
            loadPage(page);
        });
    });
});

// Hàm tìm kiếm khách hàng
function searchCustomers() {
    let formData = new FormData(document.getElementById("searchForm"));
    fetch("t002.do?action=search", {
        method: "POST",
        body: formData
    })
    .then(response => response.text())
    .then(data => {
        document.getElementById("customerTable").innerHTML = data;
        attachDeleteEvent(); // Gắn lại sự kiện xóa sau khi cập nhật danh sách
        attachPaginationEvent(); // Gắn lại sự kiện phân trang
    })
    .catch(error => console.error("Lỗi khi tìm kiếm:", error));
}

// Hàm xóa khách hàng
function deleteCustomer(customerId) {
    fetch("t002.do?action=delete&id=" + customerId, {
        method: "GET"
    })
    .then(response => response.text())
    .then(data => {
        alert("Khách hàng đã được xóa!");
        document.getElementById("customerRow-" + customerId).remove();
    })
    .catch(error => console.error("Lỗi khi xóa khách hàng:", error));
}

// Hàm xử lý phân trang
function loadPage(page) {
    fetch("t002.do?action=pagination&page=" + page, {
        method: "GET"
    })
    .then(response => response.text())
    .then(data => {
        document.getElementById("customerTable").innerHTML = data;
        attachDeleteEvent();
        attachPaginationEvent();
    })
    .catch(error => console.error("Lỗi khi phân trang:", error));
}

// Gắn lại sự kiện xóa sau khi cập nhật danh sách
function attachDeleteEvent() {
    document.querySelectorAll(".delete-btn").forEach(button => {
        button.addEventListener("click", function () {
            let customerId = this.getAttribute("data-id");
            if (confirm("Bạn có chắc chắn muốn xóa khách hàng này?")) {
                deleteCustomer(customerId);
            }
        });
    });
}

// Gắn lại sự kiện phân trang sau khi cập nhật danh sách
function attachPaginationEvent() {
    document.querySelectorAll(".pagination a").forEach(link => {
        link.addEventListener("click", function (event) {
            event.preventDefault();
            let page = this.getAttribute("data-page");
            loadPage(page);
        });
    });
}
