.table-container {
    width: 100%;
    overflow-x: auto;
    max-height: 400px; /* Gi·ªõi h·∫°n chi·ªÅu cao b·∫£ng */
    position: relative;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    table-layout: fixed; /* ƒê·∫£m b·∫£o c·ªôt c√≥ ƒë·ªô r·ªông c·ªë ƒë·ªãnh */
}

th, td {
    border: 1px solid black;
    padding: 12px;
    text-align: center;
    white-space: nowrap; /* NgƒÉn n·ªôi dung b·ªã xu·ªëng d√≤ng */
}

/* Ti√™u ƒë·ªÅ b·∫£ng c·ªë ƒë·ªãnh khi cu·ªôn */
th {
    background-color: white; /* M√†u tr·∫Øng cho ti√™u ƒë·ªÅ */
    position: sticky;
    top: 0;
    z-index: 2;
}

/* H√†ng ƒë·∫ßu ti√™n m√†u tr·∫Øng, h√†ng th·ª© hai c√≥ m√†u n·ªÅn */
tr:nth-child(2) {
    background-color: #dff0d8;
}

/* C√°c h√†ng ch·∫µn c√≥ m√†u kh√°c */
tr:nth-child(even) {
    background-color: #f2f2f2;
}

/* Hover hi·ªáu ·ª©ng */
tr:hover {
    background-color: #c1e1c5;
}

/* TƒÉng k√≠ch th∆∞·ªõc checkbox */
input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
}

/* ƒê·ªãnh d·∫°ng t·ª´ng c·ªôt */
#chkAll {
    width: 5%;
}

#lblCustomerID {
    width: 15%;
}

#lblCustomerName {
    width: 25%;
}

#lblSex {
    width: 10%;
}

#lblBirthday {
    width: 15%;
}

#lblAddress {
    width: 30%;
}

/* N√∫t b·∫•m */
button {
    margin: 10px;
    padding: 8px 12px;
    cursor: pointer;
    border: none;
    background-color: #5cb85c;
    color: white;
    font-size: 14px;
    border-radius: 5px;
}

button:hover {
    background-color: #4cae4c;
}
.table-container {
    width: 100%;
    overflow-x: auto;
    max-height: 400px; /* Gi·ªõi h·∫°n chi·ªÅu cao v√† cho ph√©p cu·ªôn */
    position: relative;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    table-layout: fixed; /* Gi·ªØ c·ªôt c·ªë ƒë·ªãnh, kh√¥ng b·ªã nh·∫£y */
}

th, td {
    border: 1px solid black;
    padding: 12px;
    text-align: center;
    white-space: nowrap; /* NgƒÉn n·ªôi dung b·ªã xu·ªëng d√≤ng */
}

th {
    background-color: white; /* H√†ng ti√™u ƒë·ªÅ m√†u tr·∫Øng */
    position: sticky;
    top: 0;
    z-index: 2; /* ƒê·∫£m b·∫£o hi·ªÉn th·ªã tr√™n n·ªôi dung */
}

tr:nth-child(2) {
    background-color: #dff0d8; /* H√†ng th·ª© 2 m√†u kh√°c */
}

tr:nth-child(even) {
    background-color: #f2f2f2; /* C√°c h√†ng ch·∫µn c√≥ m√†u nh·∫π */
}

tr:hover {
    background-color: #c1e1c5; /* Khi hover v√†o h√†ng */
}

input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
}

button {
    margin: 10px;
    padding: 8px 12px;
    cursor: pointer;
    border: none;
    background-color: #5cb85c;
    color: white;
    font-size: 14px;
    border-radius: 5px;
}

button:hover {
    background-color: #4cae4c;
}
üò°üò°üò°üò°


<div class="table-container">
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>T√™n</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            <tr><td>1</td><td>Nguy·ªÖn VƒÉn A</td><td>a@email.com</td></tr>
            <tr><td>2</td><td>Tr·∫ßn Th·ªã B</td><td>b@email.com</td></tr>
            <tr><td>3</td><td>L√™ VƒÉn C</td><td>c@email.com</td></tr>
        </tbody>
    </table>
</div>
.table-container {
    width: 100%;
    height: 300px; /* K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh c·ªßa b·∫£ng */
    overflow-y: auto; /* B·∫≠t cu·ªôn khi d·ªØ li·ªáu qu√° nhi·ªÅu */
    border: 1px solid #ddd;
}

table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed; /* ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc c·ªôt c·ªë ƒë·ªãnh */
}

thead {
    position: sticky;
    top: 0;
    background: #fff;
    z-index: 10;
}

th, td {
    border: 1px solid #ccc;
    padding: 10px;
    text-align: left;
}

tbody tr {
    height: 50px; /* Gi·ªØ chi·ªÅu cao d√≤ng c·ªë ƒë·ªãnh */
}

document.addEventListener("DOMContentLoaded", function () {
    const tableBody = document.querySelector("tbody");
    const totalRows = 6; // S·ªë d√≤ng t·ªëi thi·ªÉu hi·ªÉn th·ªã

    const currentRows = tableBody.querySelectorAll("tr").length;
    const missingRows = totalRows - currentRows;

    for (let i = 0; i < missingRows; i++) {
        const emptyRow = document.createElement("tr");
        emptyRow.innerHTML = `<td colspan="3"></td>`; // Th√™m √¥ tr·ªëng
        tableBody.appendChild(emptyRow);
    }
});
// CustomerDAO.java
import java.sql.*;
import java.util.*;

public class CustomerDAO {
    private Connection conn;
    
    public CustomerDAO(Connection conn) {
        this.conn = conn;
    }

    public Customer getCustomerById(int id) throws SQLException {
        String sql = "SELECT * FROM customers WHERE customer_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new Customer(rs.getInt("customer_id"), rs.getString("customer_name"),
                        rs.getInt("sex"), rs.getString("birth_day"), rs.getString("email"), rs.getString("address"));
            }
        }
        return null;
    }

    public void updateCustomer(Customer customer, int updatedBy) throws SQLException {
        String sql = "UPDATE customers SET customer_name=?, sex=?, birth_day=?, email=?, address=?, update_ymd=NOW(), update_psd_cd=? WHERE customer_id=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, customer.getCustomerName());
            ps.setInt(2, customer.getSex());
            ps.setString(3, customer.getBirthDay());
            ps.setString(4, customer.getEmail());
            ps.setString(5, customer.getAddress());
            ps.setInt(6, updatedBy);
            ps.setInt(7, customer.getCustomerId());
            ps.executeUpdate();
        }
    }

    public void addCustomer(Customer customer) throws SQLException {
        String sql = "INSERT INTO customers (customer_name, sex, birth_day, email, address, create_ymd) VALUES (?, ?, ?, ?, ?, NOW())";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, customer.getCustomerName());
            ps.setInt(2, customer.getSex());
            ps.setString(3, customer.getBirthDay());
            ps.setString(4, customer.getEmail());
            ps.setString(5, customer.getAddress());
            ps.executeUpdate();
        }
    }
}
